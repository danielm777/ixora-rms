agents.hotspotjvm=HotSpot JVM
hotspotjvm.description=HotSpot JVM monitoring agent

# configuration entries
config.username=Username
config.password=Password
jmx_connection_string=JMX connection string
jmx_connection_string.desc=The JMX URL. To enable monitoring for your JVM add the following system properties: \n-Dcom.sun.management.jmxremote \n-Dcom.sun.management.jmxremote.port=9999 \n-Dcom.sun.management.jmxremote.authenticate=false \n-Dcom.sun.management.jmxremote.ssl=false

thread_contention_mon_enabled=Thread contention monitoring enabled
thread_contention_mon_enabled.desc=True to enable thread contention monitoring

thread_cpu_time_enabled=Thread CPU time monitoring enabled
thread_cpu_time_enabled.desc=True to enable thread CPU time monitoring

## Compilation entity
Compilation.TotalCompilationTime=Total compilation time (ms)
Compilation.TotalCompilationTime.desc=The approximate accumulated elapsed time (in milliseconds) spent in compilation
Compilation.CompilationTimeMonitoringSupported=Supports compilation time monitoring
Compilation.CompilationTimeMonitoringSupported.desc=True if the Java virtual machine supports the monitoring of compilation time

CodeCacheManager.Valid=Valid
CodeCacheManager.Valid.desc=True if this memory manager is valid in the Java virtual machine. A memory manager becomes invalid once the Java virtual machine removes it from the memory system.

GarbageCollector.Valid=Valid
GarbageCollector.Valid.desc=True if this memory manager is valid in the Java virtual machine. A memory manager becomes invalid once the Java virtual machine removes it from the memory system.

GarbageCollector.CollectionCount=Number of collections
GarbageCollector.CollectionCount.desc=The total number of collections that have occurred. Is -1 if the collection count is undefined for this collector
GarbageCollector.CollectionTime=Collection time
GarbageCollector.CollectionTime.desc= The approximate accumulated collection elapsed time in milliseconds. Is -1 if the collection elapsed time is undefined for this collector.

GarbageCollector.GcThreadCount=Threads used
GarbageCollector.GcThreadCount.desc=The number of threads used in the last garbage collection

GarbageCollector.endTime=Collection end time
GarbageCollector.endTime.desc=The time when the collection ended

GarbageCollector.startTime=Collection start time
GarbageCollector.startTime.desc=The time when the collection started

Memory.Type=Type
Memory.Type.desc=The type of this memory pool

Memory.Valid=Valid
Memory.Valid.desc=True if this memory pool is valid in the Java virtual machine


Memory.committed=Committed memory (bytes)
Memory.committed.desc=The amount of memory in bytes that is guaranteed to be available for use by the Java virtual machine. The amount of committed memory may change over time (increase or decrease). The Java virtual machine may release memory to the system and "committed" could be less than "init". "committed" will always be greater than or equal to "used". 
Memory.init=Initial memory (bytes)
Memory.init.desc=The initial amount of memory (in bytes) that the Java virtual machine requests from the operating system for memory management during startup. The Java virtual machine may request additional memory from the operating system and may also release memory to the system over time. The value of "init" may be undefined.
Memory.max=Maximum memory (bytes)
Memory.max.desc=The maximum amount of memory (in bytes) that can be used for memory management. Its value may be undefined. The maximum amount of memory may change over time if defined. The amount of used and committed memory will always be less than or equal to "max" if "max" is defined. A memory allocation may fail if it attempts to increase the used memory such that "used" > "committed" even if "used" <= "max" would still be true (for example, when the system is low on virtual memory). 
Memory.used=Used memory (bytes)
Memory.used.desc=The amount of memory currently used (in bytes). 

Runtime.VmVersion=JVM version
Runtime.VmVersion.desc=JVM implementation version.
Runtime.VmName=JVM name
Runtime.VmName.desc=JVM implementation name.
Runtime.SpecName=Specification name
Runtime.SpecName.desc=Specification name
Runtime.ManagementSpecName=Management specification name
Runtime.ManagementSpecName.desc=The name of the specification for the management interface implemented by the running Java virtual machine.
Runtime.ManagementSpecVersion=Management specification version
Runtime.ManagementSpecVersion.desc=The version of the specification for the management interface implemented by the running Java virtual machine.
Runtime.SpecVendor=Specification vendor
Runtime.SpecVendor.desc=Specification vendor
Runtime.Uptime=Uptime (ms)
Runtime.Uptime.desc=The uptime of the Java virtual machine in milliseconds.
Runtime.StartTime=Start time (ms)
Runtime.StartTime.desc=Start time of the Java virtual machine in milliseconds.
Runtime.LibraryPath=Library path
Runtime.LibraryPath.desc=Library path
Runtime.BootClassPath=Boot class path
Runtime.BootClassPath.desc= The boot class path that is used by the bootstrap class loader to search for class files.
Runtime.VmVendor=JVM vendor
Runtime.VmVendor.desc=JVM implementation vendor.
Runtime.ClassPath=Class path
Runtime.ClassPath.desc=Class path
Runtime.SpecVersion=Specification version
Runtime.SpecVersion.desc=Specification version
Runtime.BootClassPathSupported=Supports boot class path
Runtime.BootClassPathSupported.desc=Supports boot class path

ClassLoading.Verbose=Verbose output enabled
ClassLoading.Verbose.desc=True if verbose output for the class loading system is enabled

ClassLoading.TotalLoadedClassCount=Total classes loaded
ClassLoading.TotalLoadedClassCount.desc=The total number of classes that have been loaded since the Java virtual machine has started execution.
ClassLoading.LoadedClassCount=Classes currently loaded
ClassLoading.LoadedClassCount.desc=The number of classes that are currently loaded in the Java virtual machine.
ClassLoading.UnloadedClassCount=Classes unloaded
ClassLoading.UnloadedClassCount.desc=The total number of classes unloaded since the Java virtual machine has started execution.

Threading.CurrentThreadCpuTime=Current thread CPU time (nanoseconds)
Threading.CurrentThreadCpuTime.desc=This value is of nanoseconds precison but not necessarily nanoseconds accuracy. If the implementation distinguishes between user mode time and system mode time, the returned CPU time is the amount of time that the current thread has executed in user mode or system mode
Threading.ThreadCpuTimeEnabled=CPU time enabled
Threading.ThreadCpuTimeEnabled.desc=True if thread CPU time measurement is enabled
Threading.CurrentThreadCpuTimeSupported=Current thread CPU time supported
Threading.CurrentThreadCpuTimeSupported.desc=True if the Java virtual machine supports CPU time measurement for the current thread
Threading.ThreadContentionMonitoringEnabled=Contention monitoring enabled
Threading.ThreadContentionMonitoringEnabled.desc=True if thread contention monitoring is enabled

Threading.ThreadCpuTimeSupported=Thread CPU time measurement supported
Threading.ThreadCpuTimeSupported.desc=True if the Java virtual machine implementation supports CPU time measurement for any thread

Threading.CurrentThreadCpuTime=Current thread CPU time (nanoseconds)
Threading.CurrentThreadCpuTime.desc=This value is of nanoseconds precison but not necessarily nanoseconds accuracy. If the implementation distinguishes between user mode time and system mode time, the returned CPU time is the amount of time that the current thread has executed in user mode or system mode
Threading.DaemonThreadCount=Live daemon threads
Threading.DaemonThreadCount.desc=The current number of live daemon threads
Threading.ThreadContentionMonitoringSupported=Thread contention monitoring supported
Threading.ThreadContentionMonitoringSupported.desc=True the Java virtual machine supports thread contention monitoring
Threading.PeakThreadCount=Peak live thread
Threading.PeakThreadCount.desc=The peak live thread count since the Java virtual machine started or peak was reset
Threading.TotalStartedThreadCount=Threads created and started since startup
Threading.TotalStartedThreadCount.desc=The total number of threads created and also started since the Java virtual machine started
Threading.ThreadCount=Live threads count
Threading.ThreadCount.desc=The current number of live threads including both daemon and non-daemon threads
Threading.CurrentThreadUserTime=Current thread CPU time (nanoseconds)
Threading.CurrentThreadUserTime.desc=This value is of nanoseconds precison but not necessarily nanoseconds accuracy
OperatingSystem.AvailableProcessors=Available processors
OperatingSystem.AvailableProcessors.desc=The number of processors available to the Java virtual machine
OperatingSystem.Arch=Architecture
OperatingSystem.Arch.desc=The operating system architecture
OperatingSystem.Version=Version
OperatingSystem.Version.desc=The operating system version
OperatingSystem.FreePhysicalMemorySize=Free physical memory
OperatingSystem.FreePhysicalMemorySize.desc=Free physical memory
OperatingSystem.TotalPhysicalMemorySize=Total physical memory
OperatingSystem.TotalPhysicalMemorySize.desc=Total physical memory
OperatingSystem.CommittedVirtualMemorySize=Committed virtual memory
OperatingSystem.CommittedVirtualMemorySize.desc=Committed virtual memory
OperatingSystem.ProcessCpuTime=Process CPU time
OperatingSystem.ProcessCpuTime.desc=Process CPU time
OperatingSystem.FreeSwapSpaceSize=Free swap space
OperatingSystem.FreeSwapSpaceSize.desc=Free swap space
OperatingSystem.TotalSwapSpaceSize=Total swap space
OperatingSystem.TotalSwapSpaceSize.desc=Total swap space

Memory.ObjectPendingFinalizationCount=Objects pending finalization
Memory.ObjectPendingFinalizationCount.desc=The approximate number of objects for which finalization is pending
Memory.Verbose=Verbose output enabled
Memory.Verbose.desc=Verbose output for the memory system is enabled





